package BE.ITSS.ITSS.Services;

import BE.ITSS.ITSS.DTO.*;
import BE.ITSS.ITSS.Models.Membership;
import BE.ITSS.ITSS.Models.MembershipPackage;
import BE.ITSS.ITSS.Repositories.MembershipPackageRepository;
import BE.ITSS.ITSS.Repositories.MembershipRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.sql.Date;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.TimeUnit;

@Service
public class MembershipService {

    @Autowired
    private MembershipRepository membershipRepository;

    /**
     *
     */
    @Autowired
    private MembershipPackageRepository packageRepository;

    public void registerMembership(RegisterMembershipRequest request) {
        try {
            // ‚úÖ In ƒë·∫ßu v√†o
            System.out.println(">>> [DEBUG] memberId = " + request.getMemberId());
            System.out.println(">>> [DEBUG] packageId = " + request.getPackageId());

            MembershipPackage pack = packageRepository.findById(request.getPackageId())
                    .orElseThrow(() -> new RuntimeException("G√≥i t·∫≠p kh√¥ng t·ªìn t·∫°i"));

            Membership membership = new Membership();
            membership.setMemberId(request.getMemberId());
            membership.setPackageId(request.getPackageId());
            membership.setStartDate(new Date(System.currentTimeMillis()));
            membership.setEndDate(new Date(System.currentTimeMillis() + pack.getDuration() * 86400000L));
            membership.setPaymentStatus("Ch·ªù x√°c nh·∫≠n");

            membershipRepository.save(membership);
        } catch (Exception e) {
            e.printStackTrace(); // üëà In l·ªói ra console
            throw new RuntimeException("ƒêƒÉng k√Ω th·∫•t b·∫°i: " + e.getMessage());
        }
    }

    public void savePaymentNote(SubmitPaymentNoteRequest request) {
        Membership m = membershipRepository.findByMemberIdAndPackageId(request.getMemberId(), request.getPackageId())
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ƒëƒÉng k√Ω g√≥i t·∫≠p"));

        if (!"Ch·ªù x√°c nh·∫≠n".equals(m.getPaymentStatus())) {
            throw new RuntimeException("G√≥i t·∫≠p kh√¥ng ·ªü tr·∫°ng th√°i ch·ªù thanh to√°n.");
        }

        m.setPaymentNote(request.getPaymentNote());
        membershipRepository.save(m);
    }

    public List<RegisteredPackageResponse> getRegisteredPackages(Long memberId) {
        List<Membership> memberships = membershipRepository.findByMemberId(memberId);
        List<RegisteredPackageResponse> result = new ArrayList<>();

        for (Membership m : memberships) {
            MembershipPackage pack = packageRepository.findById(m.getPackageId())
                    .orElse(null); // null n·∫øu d·ªØ li·ªáu b·ªã l·ªói

            if (pack == null) continue;

            RegisteredPackageResponse res = new RegisteredPackageResponse();
            res.setPackageName(pack.getPackageName());
            res.setStartDate(m.getStartDate());
            res.setEndDate(m.getEndDate());
            res.setPaymentStatus(m.getPaymentStatus());
            res.setPaymentNote(m.getPaymentNote());

            if ("ƒê√£ thanh to√°n".equals(m.getPaymentStatus())) {
                long diffMillis = m.getEndDate().getTime() - System.currentTimeMillis();
                long remainingDays = TimeUnit.MILLISECONDS.toDays(diffMillis);
                res.setRemainingDays(Math.max(remainingDays, 0)); // kh√¥ng √¢m
            }

            result.add(res);
        }

        return result;
    }

    public void confirmPayment(ConfirmPaymentRequest request) {
        Membership m = membershipRepository.findByMemberIdAndPackageId(
                request.getMemberId(), request.getPackageId()
        ).orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y g√≥i t·∫≠p ƒë√£ ƒëƒÉng k√Ω"));

        if (!"Ch·ªù x√°c nh·∫≠n".equals(m.getPaymentStatus())) {
            throw new RuntimeException("G√≥i n√†y ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n ho·∫∑c hu·ª∑ tr∆∞·ªõc ƒë√≥");
        }

        m.setPaymentStatus("ƒê√£ thanh to√°n");
        m.setStartDate(new Date(System.currentTimeMillis()));

        // T√≠nh to√°n th·ªùi h·∫°n d·ª±a tr√™n g√≥i
        MembershipPackage pack = packageRepository.findById(m.getPackageId())
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y th√¥ng tin g√≥i t·∫≠p"));
        m.setEndDate(new Date(System.currentTimeMillis() + pack.getDuration() * 86400000L));

        membershipRepository.save(m);
    }

    public void requestCancelPackage(CancelRequest request) {
        Membership m = membershipRepository.findByMemberIdAndPackageId(request.getMemberId(), request.getPackageId())
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y g√≥i t·∫≠p ƒë√£ ƒëƒÉng k√Ω."));

        if (!"ƒê√£ thanh to√°n".equals(m.getPaymentStatus())) {
            throw new RuntimeException("Ch·ªâ c√≥ th·ªÉ y√™u c·∫ßu hu·ª∑ nh·ªØng g√≥i ƒë√£ thanh to√°n.");
        }

        m.setPaymentStatus("Y√™u c·∫ßu hu·ª∑ g√≥i t·∫≠p");
        m.setPaymentNote("Y√™u c·∫ßu hu·ª∑: " + request.getCancelReason());
        membershipRepository.save(m);
    }

    public void confirmCancelPackage(CancelRequest request) {
        Membership m = membershipRepository
                .findByMemberIdAndPackageId(request.getMemberId(), request.getPackageId())
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y g√≥i t·∫≠p ƒë√£ ƒëƒÉng k√Ω"));

        // Ch·ªâ cho x·ª≠ l√Ω n·∫øu ƒëang ·ªü tr·∫°ng th√°i y√™u c·∫ßu hu·ª∑
        if (!"Y√™u c·∫ßu hu·ª∑ g√≥i t·∫≠p".equals(m.getPaymentStatus())) {
            throw new RuntimeException("G√≥i t·∫≠p kh√¥ng ·ªü tr·∫°ng th√°i y√™u c·∫ßu hu·ª∑");
        }

        // N·∫øu admin ƒë·ªìng √Ω hu·ª∑
        if ("X√°c nh·∫≠n hu·ª∑".equalsIgnoreCase(request.getPaymentStatus())) {
            m.setPaymentStatus("ƒê√£ hu·ª∑");
            m.setEndDate(new Date(System.currentTimeMillis())); // C·∫Øt ngay n·∫øu c·∫ßn
        } else {
            // Admin t·ª´ ch·ªëi hu·ª∑, gi·ªØ l·∫°i tr·∫°ng th√°i c≈©, gi·∫£ s·ª≠ l√† "Paid"
            m.setPaymentStatus("ƒê√£ thanh to√°n");
            m.setPaymentNote(null); // Xo√° l√Ω do hu·ª∑ n·∫øu kh√¥ng c·∫ßn gi·ªØ l·∫°i
        }

        membershipRepository.save(m);
    }

    public void requestRenewal(RenewalRequest request) {
        Membership m = membershipRepository.findById(request.getMembershipId())
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y g√≥i t·∫≠p"));

        if (!"ƒê√£ thanh to√°n".equalsIgnoreCase(m.getPaymentStatus())) {
            throw new RuntimeException("Ch·ªâ c√≥ th·ªÉ gia h·∫°n g√≥i ƒë√£ thanh to√°n.");
        }

        m.setPaymentStatus("Y√™u c·∫ßu gia h·∫°n");
        m.setPaymentNote("Y√™u c·∫ßu gia h·∫°n: " + request.getPaymentNote());

        membershipRepository.save(m);
    }

}
