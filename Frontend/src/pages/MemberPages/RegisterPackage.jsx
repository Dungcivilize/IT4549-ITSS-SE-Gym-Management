// src/pages/MemberPages/RegisterPackage.jsx
import React, { useEffect, useState } from "react";
import axios from "axios";
import styles from "../../assets/css/RegisterPackage.module.css";
import MemberNavbar from "../../Components/MemberNavbar.jsx";

const RegisterPackage = () => {
  const [packages, setPackages] = useState([]);
  const [selectedPackage, setSelectedPackage] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [trainers, setTrainers] = useState([]);
  const [selectedTrainerId, setSelectedTrainerId] = useState("");
  const [registering, setRegistering] = useState(false);

  useEffect(() => {
    axios
      .get("http://localhost:8080/api/packages")
      .then((res) => setPackages(res.data))
      .catch((err) => console.error(err));
  }, []);

  const handleRowClick = (pkg) => {
    setSelectedPackage(pkg);
    setShowModal(true);
    setSelectedTrainerId(""); // reset PT ƒë√£ ch·ªçn

    if (pkg.pt) {
      axios
        .get(`http://localhost:8080/api/packages/${pkg.packageId}/trainers`)
        .then((res) => setTrainers(res.data))
        .catch((err) => {
          console.error("L·ªói khi l·∫•y danh s√°ch hu·∫•n luy·ªán vi√™n:", err);
          setTrainers([]);
        });
    } else {
      setTrainers([]);
    }
  };

  const handleRegister = () => {
    if (!selectedPackage) return;

    if (selectedPackage.pt && !selectedTrainerId) {
      alert("Vui l√≤ng ch·ªçn hu·∫•n luy·ªán vi√™n tr∆∞·ªõc khi ƒëƒÉng k√Ω!");
      return;
    }

    const payload = {
      memberId: 1, // Thay b·∫±ng ID th·∫≠t n·∫øu c√≥ context user login
      trainerId: selectedPackage.pt ? selectedTrainerId || null : null,
      packageId: selectedPackage.packageId,
    };

    setRegistering(true);

    axios
      .post("http://localhost:8080/api/memberships/register", payload)
      .then(() => {
        alert("‚úÖ B·∫°n ƒë√£ ƒëƒÉng k√Ω g√≥i t·∫≠p th√†nh c√¥ng!");
        setShowModal(false);
      })
      .catch((err) => {
        console.error(err);
        alert("‚ùå ƒêƒÉng k√Ω th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i sau.");
      })
      .finally(() => setRegistering(false));
  };

  return (
    <>
      <MemberNavbar />
      <div className={styles.container}>
        <h2 className={styles.title}>üì¶ Danh s√°ch g√≥i t·∫≠p</h2>
        <table className={styles.table}>
          <thead>
            <tr>
              <th>ID</th>
              <th>T√™n g√≥i</th>
              <th>Th·ªùi h·∫°n</th>
              <th>Gi√°</th>
              <th>Lo·∫°i</th>
              <th>C√≥ PT</th>
            </tr>
          </thead>
          <tbody>
            {packages.map((pkg) => (
              <tr key={pkg.packageId} onClick={() => handleRowClick(pkg)}>
                <td>{pkg.packageId}</td>
                <td>{pkg.packageName}</td>
                <td>{pkg.duration} ng√†y</td>
                <td>{pkg.price.toLocaleString()}‚Ç´</td>
                <td>{pkg.packageType}</td>
                <td>{pkg.pt ? "‚úÖ" : "‚ùå"}</td>
              </tr>
            ))}
          </tbody>
        </table>

        {showModal && selectedPackage && (
          <div
            className={styles.modalOverlay}
            onClick={() => setShowModal(false)}
          >
            <div className={styles.modal} onClick={(e) => e.stopPropagation()}>
              <button
                className={styles.closeIcon}
                onClick={() => setShowModal(false)}
              >
                ‚ùå
              </button>

              <img
                src="https://levelfyc.com/wp-content/uploads/2024/09/thue-pt-1-1.jpg"
                alt="Package"
                className={styles.image}
              />

              <div className={styles.details}>
                <h3>{selectedPackage.packageName}</h3>
                <p>‚è± Th·ªùi h·∫°n: {selectedPackage.duration} ng√†y</p>
                <p>üí∏ Gi√°: {selectedPackage.price.toLocaleString()}‚Ç´</p>
                <p>üìÅ Lo·∫°i: {selectedPackage.packageType}</p>
                <p>üèãÔ∏è C√≥ PT: {selectedPackage.pt ? "C√≥" : "Kh√¥ng"}</p>

                {selectedPackage.pt ? (
                  trainers.length > 0 ? (
                    <div className={styles.ptDropdown}>
                      <label htmlFor="trainer">Ch·ªçn hu·∫•n luy·ªán vi√™n:</label>
                      <select
                        id="trainer"
                        value={selectedTrainerId}
                        onChange={(e) => setSelectedTrainerId(e.target.value)}
                      >
                        <option value="">-- Ch·ªçn PT --</option>
                        {trainers.map((t) => (
                          <option key={t.userId} value={t.userId}>
                            {t.fullname}
                          </option>
                        ))}
                      </select>
                    </div>
                  ) : (
                    <p className={styles.ptDropdown}>
                      Kh√¥ng t√¨m th·∫•y hu·∫•n luy·ªán vi√™n ph√π h·ª£p.
                    </p>
                  )
                ) : (
                  <p className={styles.ptDropdown}>
                    G√≥i t·∫≠p hi·ªán t·∫°i kh√¥ng c√≥ PT h·ªó tr·ª£.
                  </p>
                )}

                <p className={styles.description}>
                  G√≥i t·∫≠p {selectedPackage.packageName} ph√π h·ª£p cho nh·ªØng ng∆∞·ªùi
                  mu·ªën duy tr√¨ th·ªÉ l·ª±c b·ªÅn v·ªØng v√† n√¢ng cao s·ª©c kh·ªèe to√†n di·ªán
                  trong {selectedPackage.duration} ng√†y.
                </p>

                <button
                  className={styles.registerBtn}
                  onClick={handleRegister}
                  disabled={registering}
                >
                  {registering ? "ƒêang x·ª≠ l√Ω..." : "ƒêƒÉng k√Ω"}
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </>
  );
};

export default RegisterPackage;
